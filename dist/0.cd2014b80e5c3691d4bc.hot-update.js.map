{"version":3,"sources":["webpack:///./server/index.js?d43f"],"names":["install","atem1me","atemTV1","atemTV2","connect","midiOutA","appModule","require","db","server","websocket","UDPserver","UDPclient","current_universe","Buffer","universe","PTZ_init","from","PTZ_network_setting","PTZ_change_IP_Enquiry","PTZ_change_IP","PTZ_camera_on","PTZ_camera_off","then","connection","createServer","setDb","on","app","listen","console","log","createSocket","err","stack","close","msg","rinfo","address","port","bind","socket","id","data","host","command","runTelnet","message","changeProgramInput","changePreviewInput","changeTransitionPosition","autoTransition","changeTransitionType","atem1md","runMacro","sockets","emit","buffer","JSON","stringify","update","updateAll","UDPmessage","send","controller","value","channel","number","telnetHost","telnetPort","params","timeout","negotiationMandatory","ors","waitfor","res","trim","telnetResponse","catch","error","module","hot","accept","removeListener"],"mappings":"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","file":"0.cd2014b80e5c3691d4bc.hot-update.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\nimport 'babel-polyfill';\r\nimport http from 'http';\r\nimport { MongoClient } from 'mongodb';\r\nimport socketio from 'socket.io';\r\nimport telnet from 'telnet-client';\r\nimport DMX from './dmx_usb_pro.js';\r\nimport dgram from 'dgram';\r\nimport emptyFunction from 'fbjs/lib/emptyFunction';\r\nimport ATEM from 'applest-atem/lib/atem.js';\r\nimport easymidi from 'easymidi/index.js';\r\n\r\nlet atem1me = new ATEM();\r\nlet atemTV1 = new ATEM();\r\nlet atemTV2 = new ATEM();\r\n\r\n//atem1me.connect('192.168.10.240');\r\natemTV1.connect('192.168.10.240');\r\n//atemTV2.connect('192.168.10.242');\r\nvar midiOutA;\r\n//var midiOutA = new easymidi.Output('MIDIPLUS TBOX 2x2 1');\r\n\r\nlet appModule = require('./server.js');\r\nlet db;\r\nlet server;\r\nlet websocket;\r\nlet UDPserver;\r\nlet UDPclient;\r\n\r\nlet current_universe = new Buffer(512)\r\nlet universe = new DMX('COM3', current_universe);\r\n//console.log(\"dmx: \" + JSON.stringify(dmx));\r\n//let universe = dmx.initializeDMXUSBPRO('COM3');\r\n//console.log(\"universe: \" + JSON.stringify(dmx));\r\n\r\n//let on = false;\r\n\r\nconst PTZ_init = Buffer.from('020000010000000001', 'hex');\r\nconst PTZ_network_setting = Buffer.from('02045d4b9d2eceff1921680102ff255255255000ffrobocam2ff03', 'hex');\r\nconst PTZ_change_IP_Enquiry = Buffer.from('02454e513a6e6574776f726b03ff', 'hex');\r\nconst PTZ_change_IP = Buffer.from('024d41433a30342d35642d34622d39642d32652d6365FF49504144523a3139322e3136382e31302e323030FF4d41534b3a3235352e3235352e302e30FF4e414d453a43414d4552413031FF03', 'hex');\r\nconst PTZ_camera_on = Buffer.from('010000060000000c8101040002ff', 'hex');\r\nconst PTZ_camera_off = Buffer.from('010000060000000c8101040003ff', 'hex');\r\n\r\n//atemTV1.on('connect', function() {\r\n\r\n                 \r\n \r\nMongoClient.connect('mongodb://localhost/cinebrain').then(connection => {\r\n  db = connection;\r\n  server = http.createServer();\r\n  appModule.setDb(db);\r\n  server.on('request', appModule.app);\r\n  server.listen(80, () => {\r\n    console.log('App started on port 80');\r\n  });\r\n\r\n  UDPserver = dgram.createSocket('udp4');\r\n  UDPclient = dgram.createSocket('udp4');\r\n\r\n  UDPserver.on('error', (err) => {\r\n  console.log(`UDP server error:\\n${err.stack}`);\r\n  UDPserver.close();\r\n  });\r\n\r\n  UDPserver.on('message', (msg, rinfo) => {\r\n    console.log(`UDP server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\r\n  });\r\n\r\n  UDPserver.on('listening', () => {\r\n    const address = '192.168.10.101';\r\n    console.log(`UDP server listening ${address.address}:${address.port}`);\r\n  });\r\n\r\n  /*UDPclient.send(PTZ_init, 52381, '192.168.0.100', (err) => {\r\n    console.log(\"send message \" + PTZ_init + \" err: \" + err);\r\n    UDPclient.send(PTZ_camera_on, 52381, '192.168.0.100', (err) => {\r\n      console.log(\"send message \" + PTZ_camera_on + \" err: \" + err);\r\n    });\r\n  });\r\n*/\r\n /* UDPclient.send(PTZ_network_setting, 52380, '192.168.0.100', (err) => {\r\n    console.log(\"send message err: \" + err);\r\n  });\r\n*/\r\n  UDPserver.bind(62455);\r\n\r\n  websocket = socketio(server);\r\n  websocket.on('connection', (socket) => {\r\n   \r\n        console.log(\"user connected from: \" + socket.id);\r\n\r\n        socket.on('disconnect', () => {\r\n                console.log('user disconnected')\r\n        });\r\n        socket.on('diagnostics-send-telnet', function(data) {\r\n                console.log(\"received telnet command: \" + data.host + \":\" + data.port + \"-->\" + data.command);\r\n                runTelnet(data.host, data.port, data.command);\r\n        });\r\n        socket.on('control-interface-send-telnet', function(data) {\r\n                console.log(\"received telnet command: \" + data.host + \":\" + data.port + \"-->\" + data.command);\r\n                runTelnet(data.host, data.port, data.command);\r\n        });\r\n        socket.on('atem1me_changeProgramInput', (message) => {\r\n                console.log(\"received atem 1 m/e program input command: \" + message);\r\n                atem1me.changeProgramInput(message);\r\n        });\r\n        socket.on('atem1me_changePreviewInput', (message) => {\r\n                console.log(\"received atem 1 m/e preview input command: \" + message);\r\n                atem1me.changePreviewInput(message);\r\n        });\r\n        socket.on('atemTV1_changeProgramInput', (message) => {\r\n                console.log(\"received atem TV 1 program input command: \" + message);\r\n                atemTV1.changeProgramInput(message);\r\n        });\r\n        socket.on('atemTV1_changePreviewInput', (message) => {\r\n                console.log(\"received atem TV 1 preview input command: \" + message);\r\n                atemTV1.changePreviewInput(message);\r\n        });\r\n        socket.on('atemTV1_transition_position', (message) => {\r\n                console.log(\"received atem TV 1 preview input command: \" + message);\r\n                atemTV1.changeTransitionPosition(message);\r\n        });\r\n         socket.on('atemTV1_autoTransition', (message) => {\r\n                console.log(\"received atem TV 1 preview input command: \" + message);\r\n                atemTV1.autoTransition();\r\n        });\r\n          socket.on('atemTV1_transitionType', (message) => {\r\n                console.log(\"received atem TV 1 preview input command: \" + message);\r\n                atemTV1.changeTransitionType(message);\r\n        });\r\n        socket.on('atemTV2_changeProgramInput', (message) => {\r\n                console.log(\"received atem TV 2 program input command: \" + message);\r\n              \r\n                atemTV2.changeProgramInput(message);\r\n\r\n        });\r\n        socket.on('atemTV2_changePreviewInput', (message) => {\r\n                console.log(\"received atem TV 2 preview input command: \" + message);\r\n                atemTV2.changePreviewInput(message);\r\n        });\r\n         socket.on('atem1me_runMacro', (message) => {\r\n                console.log(\"received atem 1 m/e preview input command: \" + message);\r\n                    atem1md.runMacro(2);\r\n                    atem1me.runMacro(message);\r\n        });\r\n        socket.on('device-menu', (message) => {\r\n          console.log(\"the device number is: \" + message);\r\n          websocket.sockets.emit(\"show-parameters\", message);\r\n        });\r\n        socket.on('parameter-menu', (buffer) => {\r\n                console.log(\"the parameter packet is: \" + buffer);\r\n                websocket.sockets.emit(\"show-parameter-inputs\", buffer);\r\n        }); \r\n        socket.on('dmx-go', (buffer) => {\r\n                console.log(\"dmx-go: \" + JSON.stringify(buffer));\r\n                //console.log(\"dmx-going-says: \" + JSON.stringify(dmx));\r\n                universe.update(buffer);\r\n        });     \r\n        socket.on('dmx-all', (buffer) => {\r\n                universe.updateAll(buffer);\r\n        });     \r\n        socket.on('ptz-go', function(data) {\r\n                let UDPmessage = Buffer.from(data.buffer, 'hex');\r\n                UDPclient.send(PTZ_init, data.port, data.host, (err) => {\r\n                  UDPclient.send(UDPmessage, data.port, data.host, (err) => {\r\n                  console.log(\"send message \" + data.buffer + \" err: \" + err);\r\n                  });\r\n                });\r\n        });     \r\n        socket.on('midi-cc', function(data) {\r\n              midiOutA.send('cc', {\r\n                controller: data.controller,\r\n                value: data.value,\r\n                channel: data.channel\r\n              });\r\n        });\r\n        socket.on('midi-program', function(data) {\r\n              midiOutA.send('program', {\r\n                number: data.number,\r\n                channel: data.channel\r\n              });\r\n        });\r\n\r\n        const telnetHost = '127.0.0.1';\r\n        const telnetPort = 5250;\r\n\r\n        function runTelnet(telnetHost, telnetPort, command) {\r\n          var connection = new telnet();\r\n\r\n          var params = {\r\n              host: telnetHost,\r\n              port: telnetPort,\r\n              timeout: 1500,\r\n              negotiationMandatory: false,\r\n              ors: '\\r\\n', \r\n              waitfor: '\\n' \r\n          };\r\n          connection.on('connect', function() {\r\n              connection.send(command, function(err, res) {\r\n                  if (err) return err\r\n\r\n                  console.log('first message:', res.trim())\r\n\r\n                  telnetResponse(res);\r\n\r\n                  connection.send('', {\r\n                      ors: '\\r\\n',\r\n                      waitfor: '\\n'\r\n                  }, function(err, res) {\r\n                    if (err) return err\r\n\r\n                      console.log('resp after cmd:', res)\r\n                  })\r\n              })\r\n          })\r\n\r\n          connection.connect(params)\r\n        }\r\n\r\n        function telnetResponse (res) {\r\n          websocket.sockets.emit(\"telnet-response\", res);\r\n        }\r\n  });\r\n \r\n}).catch(error => {\r\n  console.log('ERROR:', error);\r\n});\r\n\r\n//});\r\n\r\n\r\nif (module.hot) {\r\n  module.hot.accept('./server.js', () => {\r\n    server.removeListener('request', appModule.app);\r\n    appModule = require('./server.js');     // eslint-disable-line\r\n    appModule.setDb(db);\r\n    server.on('request', appModule.app);\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./server/index.js"],"sourceRoot":""}